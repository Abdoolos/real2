import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testConnection() {
  console.log('๐ ุฌุงุฑู ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...\n');
  
  try {
    // ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    await prisma.$connect();
    console.log('โ ูุฌุญ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช!');
    console.log('๐ ูุนูููุงุช ุงูุงุชุตุงู:');
    console.log('   - Provider: PostgreSQL');
    console.log('   - Host: Supabase');
    console.log('   - Status: ูุชุตู\n');
    
    // ูุญุงููุฉ ุงุณุชุนูุงู ุจุณูุท
    const result = await prisma.$queryRaw`SELECT version()`;
    console.log('โ ุชู ุชูููุฐ ุงุณุชุนูุงู ุชุฌุฑูุจู ุจูุฌุงุญ');
    console.log('   - PostgreSQL Version:', result[0].version.split(' ')[1]);
    
    await prisma.$disconnect();
    console.log('\nโ ุชู ูุตู ุงูุงุชุตุงู ุจูุฌุงุญ');
    console.log('\n๐ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฌุงูุฒุฉ! ููููู ุงูุขู ุชุดุบูู setup-supabase-database.bat');
    process.exit(0);
    
  } catch (error) {
    console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช!\n');
    console.error('ุชูุงุตูู ุงูุฎุทุฃ:');
    console.error('   - ุงูุฑุณุงูุฉ:', error.message);
    
    if (error.code === 'P1000') {
      console.error('\n๐ก ุงูุญู ุงูููุชุฑุญ:');
      console.error('   1. ุชุญูู ูู DATABASE_URL ูู ููู .env');
      console.error('   2. ุชุฃูุฏ ูู ุฃู ูููุฉ ุงููุฑูุฑ ุตุญูุญุฉ');
      console.error('   3. ุชุญูู ูู ุฃู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุนูู Supabase ูู ุญุงูุฉ Active');
      console.error('   4. ุชุญูู ูู ุฅุนุฏุงุฏุงุช IP Restrictions ูู Supabase');
    }
    
    await prisma.$disconnect();
    process.exit(1);
  }
}

testConnection();
