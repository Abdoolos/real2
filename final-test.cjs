// ุงุฎุชุจุงุฑ ุงูุญู ุงูููุงุฆู ูุน ุงูุจููุฉ ุงูุตุญูุญุฉ
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function finalTest() {
  try {
    console.log('๐ ุงูุงุฎุชุจุงุฑ ุงูููุงุฆู ููุญู...\n');

    // 1. ุฅูุดุงุก ูุตุฑูู ุจุงูุจููุฉ ุงูุตุญูุญุฉ
    const testExpense = {
      id: `final-test-${Date.now()}`,
      userId: 'test-user-final',
      categoryId: 'cat-food',
      subcategoryId: 'sub-food-1',
      amount: 100,
      date: new Date().toISOString().split('T')[0],
      description: 'ุงุฎุชุจุงุฑ ุงูุญู ุงูููุงุฆู โ'
    };

    console.log('๐ฐ ุฅูุดุงุก ูุตุฑูู ุจุงูุจููุฉ ุงูููุงุฆูุฉ:', testExpense);

    const { data: created, error: createError } = await supabase
      .from('expenses')
      .insert([testExpense])
      .select('*')
      .single();

    if (createError) {
      console.error('โ ูุดู ุงูุฅูุดุงุก:', createError);
      return;
    }

    console.log('โ ุชู ุงูุฅูุดุงุก ุจูุฌุงุญ!');
    console.log('๐ ุงูุจูุงูุงุช ุงููููุดุฃุฉ:');
    Object.keys(created).forEach(col => {
      console.log(`  - ${col}: ${created[col]}`);
    });

    // 2. ุงุฎุชุจุงุฑ ุฌูุจ ุงููุตุงุฑูู (ูุญุงูู API call)
    console.log('\n๐ ุงุฎุชุจุงุฑ ุฌูุจ ุงููุตุงุฑูู...');
    
    const { data: fetched, error: fetchError } = await supabase
      .from('expenses')
      .select('*')
      .eq('userId', testExpense.userId)
      .order('date', { ascending: false });

    if (fetchError) {
      console.error('โ ูุดู ุงูุฌูุจ:', fetchError);
    } else {
      console.log('โ ุชู ุงูุฌูุจ ุจูุฌุงุญ!');
      console.log(`๐ ุนุฏุฏ ุงููุตุงุฑูู: ${fetched.length}`);
      fetched.forEach(exp => {
        console.log(`  - ${exp.amount} ุฑ.ุณ - ${exp.description}`);
      });
    }

    // 3. ูุญุต ุฅุฌูุงูู ุงููุตุงุฑูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const { count } = await supabase
      .from('expenses')
      .select('*', { count: 'exact', head: true });
      
    console.log(`\n๐ ุฅุฌูุงูู ุงููุตุงุฑูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${count}`);

    // 4. ุชูุธูู ุงููุตุฑูู ุงูุชุฌุฑูุจู
    console.log('\n๐งน ุชูุธูู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ...');
    const { error: deleteError } = await supabase
      .from('expenses')
      .delete()
      .eq('id', testExpense.id);
      
    if (!deleteError) {
      console.log('โ ุชู ุญุฐู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ');
    }

    console.log('\n๐๐๐ ุงูุญู ุงูููุงุฆู ูุนูู ุจุดูู ูุซุงูู! ๐๐๐');
    console.log('\nโ ุงูุขู ูููู ูููุณุชุฎุฏููู:');
    console.log('  1. ุฅุถุงูุฉ ุงููุตุงุฑูู ุจูุฌุงุญ');
    console.log('  2. ุนุฑุถ ุฌููุน ุงููุตุงุฑูู ูู ุงููุงุฆูุฉ');
    console.log('  3. ุงุณุชุฎุฏุงู ุฒุฑ ุงููุตุฑูู ุงูุชุฌุฑูุจู');

  } catch (error) {
    console.error('๐ฅ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ ุงูููุงุฆู:', error);
  }
}

finalTest();
